#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

class Stack {
private:
    static const int MAX = 100;
    int stack[MAX];
    int top;

public:
    Stack() { top = -1; }

    bool isEmpty() { return top == -1; }

    void push(int value) {
        if (top == MAX - 1) {
            cout << "Stack Overflow" << endl;
            return;
        }
        stack[++top] = value;
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow" << endl;
            return -1;
        }
        return stack[top--];
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
            return -1;
        }
        return stack[top];
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
        } else {
            for (int i = top; i >= 0; i--)
                cout << stack[i] << " ";
            cout << endl;
        }
    }
};

int main() {
    Stack s;

    auto start = high_resolution_clock::now();

    // Example operations
    for (int i = 0; i < 100; i++) {
        s.push(i);
    }
    for (int i = 0; i < 50; i++) {
        s.pop();
    }

    auto end = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(end - start);

    cout << "Time taken for stack operations: " << duration.count() << " microseconds" << endl;

    s.display();

    return 0;
}

