#include <iostream>
#include <string>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int value) {
        data = value;
        next = NULL;
    }
};

Node* head = NULL;

// Insert at end
void insertAtEnd(int value) {
    Node* newNode = new Node(value);
    if (!head) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = newNode;
}

// Insert at beginning
void insertAtBeginning(int value) {
    Node* newNode = new Node(value);
    newNode->next = head;
    head = newNode;
}

// Insert at position
void insertAtPosition(int value, int position) {
    Node* newNode = new Node(value);
    if (position == 1) {
        newNode->next = head;
        head = newNode;
        return;
    }
    Node* temp = head;
    for (int i = 1; i <= position - 2; i++) {
        if (!temp) {
            cout << "Invalid position" << endl;
            delete newNode;
            return;
        }
        temp = temp->next;
    }
    if (!temp) {
        cout << "Invalid position" << endl;
        delete newNode;
        return;
    }
    newNode->next = temp->next;
    temp->next = newNode;
}

// Traverse and print
void TraverseLinkedList() {
    if (!head) {
        cout << "List is empty." << endl;
        return;
    }
    Node* current = head;
    while (current) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
}

// Count nodes
int countNodes() {
    int count = 0;
    Node* temp = head;
    while (temp) {
        count++;
        temp = temp->next;
    }
    return count;
}

int main() {
    string command;
    cout << "Commands:\n"
         << "i b <value>       - Insert at beginning\n"
         << "i e <value>       - Insert at end\n"
         << "i p <value> <pos> - Insert at position\n"
         << "t                 - Traverse list\n"
         << "c                 - Count nodes\n"
         << "q                 - Quit\n";

    while (true) {
        cout << "\nEnter command: ";
        cin >> command;

        if (command == "i") {
            string where;
            cin >> where;
            if (where == "e") {
                int val; cin >> val;
                insertAtEnd(val);
            } else if (where == "b") {
                int val; cin >> val;
                insertAtBeginning(val);
            } else if (where == "p") {
                int val, pos;
                cin >> val >> pos;
                insertAtPosition(val, pos);
            } else {
                cout << "Invalid insert command" << endl;
            }
        } else if (command == "t") {
            TraverseLinkedList();
        } else if (command == "c") {
            cout << "Number of nodes: " << countNodes() << endl;
        } else if (command == "q") {
            cout << "Quitting program." << endl;
            break;
        } else {
            cout << "Invalid command" << endl;
        }
    }

    return 0;
}
